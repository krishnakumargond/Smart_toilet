//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Smart_toilet.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class db_smart_toiletEntities : DbContext
    {
        public db_smart_toiletEntities()
            : base("name=db_smart_toiletEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<LoginInfo> LoginInfoes { get; set; }
        public virtual DbSet<tbl_Toilet> tbl_Toilet { get; set; }
        public virtual DbSet<tbl_Transition> tbl_Transition { get; set; }
    
        public virtual ObjectResult<string> GetLoginInfo(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetLoginInfo", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<rpt_GetAllTransition_Result> rpt_GetAllTransition(Nullable<int> pageSize, string search, Nullable<int> pageNum)
        {
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("PageNum", pageNum) :
                new ObjectParameter("PageNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetAllTransition_Result>("rpt_GetAllTransition", pageSizeParameter, searchParameter, pageNumParameter);
        }
    
        public virtual ObjectResult<rpt_GetAllTransitionByProdectId_Result> rpt_GetAllTransitionByProdectId(string deviceId)
        {
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetAllTransitionByProdectId_Result>("rpt_GetAllTransitionByProdectId", deviceIdParameter);
        }
    
        public virtual ObjectResult<rpt_GetLoction_Result> rpt_GetLoction()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetLoction_Result>("rpt_GetLoction");
        }
    
        public virtual ObjectResult<Nullable<int>> rpt_GetNotifcation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("rpt_GetNotifcation");
        }
    
        public virtual int usp_DeleteDevice(Nullable<int> deviceId)
        {
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteDevice", deviceIdParameter);
        }
    
        public virtual int usp_InerstDevice(string code, string add, Nullable<bool> isActive, string lat, string lng)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var addParameter = add != null ?
                new ObjectParameter("Add", add) :
                new ObjectParameter("Add", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var latParameter = lat != null ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(string));
    
            var lngParameter = lng != null ?
                new ObjectParameter("Lng", lng) :
                new ObjectParameter("Lng", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InerstDevice", codeParameter, addParameter, isActiveParameter, latParameter, lngParameter);
        }
    
        public virtual int usp_UpdateDevice(Nullable<int> device, string proid, string proname, Nullable<bool> actiive, string let, string @long)
        {
            var deviceParameter = device.HasValue ?
                new ObjectParameter("device", device) :
                new ObjectParameter("device", typeof(int));
    
            var proidParameter = proid != null ?
                new ObjectParameter("proid", proid) :
                new ObjectParameter("proid", typeof(string));
    
            var pronameParameter = proname != null ?
                new ObjectParameter("proname", proname) :
                new ObjectParameter("proname", typeof(string));
    
            var actiiveParameter = actiive.HasValue ?
                new ObjectParameter("actiive", actiive) :
                new ObjectParameter("actiive", typeof(bool));
    
            var letParameter = let != null ?
                new ObjectParameter("let", let) :
                new ObjectParameter("let", typeof(string));
    
            var longParameter = @long != null ?
                new ObjectParameter("long", @long) :
                new ObjectParameter("long", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateDevice", deviceParameter, proidParameter, pronameParameter, actiiveParameter, letParameter, longParameter);
        }
    }
}
